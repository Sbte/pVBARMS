
------------------------------ INSTALLING AND RUNNING pVBARMS -----------------


I. INSTALLING pVBARMS.

  a) Dependency: LAPACK, BLAS, MPI

  b) NOTE: To compile the complex version of pVARMS, replace the -DDBL flag in
     makefile.in with -DDBL_CMPLX or goto example/general/;./complexcompile

  c) Type 'make' to build the library --

  d) 'cd example/general/;./recompile' to compile and generate excutable files.

II. Running the examples 

  a) Try running some examples with general matrices.
     Enter directory 'examples/general'. There are several options:
     -- Depends on your matrix format, you can choose the matched main driver
        to run. Bdd-HB-dse.ex, Bdd-mtx-dse.ex or Bdd-bin-dse.ex are respectively
        for Harwell Boeing matrix format, matrix market format and binary data
        matrix format.


IV. Sequences in which routines are called.
  a). Partition the mesh or graph using a partitioner such as  Metis,
      or dse (included), or ParMetis, or zoltan, etc...  
  b). Create a map object based on the output from a mesh
      partitioning software. For example, based on the output from
      the Metis, you may create a map object by calling function
      pARMS_MapCreateFromGlobal(...).
  c). Create matrix based on the map created
      above. pARMS_MatCreate(&mat, map);
  d). Insert entries into the vectors and the matrix. Note that
      the indices of entries are in global labeling. Vectors in this 
      version of pARMS use the standard C array pointers. FLOAT *rhs, *sol;
  e). Set up the matrix by calling
      pARMS_MatSetup(mat); After this call above, one cannot insert entries to
      the matrix anymore.  
  f). Create a preconditioner based on the matrix created
      above. pARMS_PCCreate(&pc, mat); You can set the type of the
      preconditioner by pARMS_PCSetType. Currently, PCBJ(block
      Jacobi), PCSCHUR(Schur complement), PCRAS(restrctive
      additive Schwarz) are available. More robust preconditioner
      like SCHURRAS will be available soon-- 
  g). Call pARMS_PCSetup(pc) to create the preconditioning matrix.
  h). Create a solver based on the matrix and the preconditioner
      created above. pARMS_SolverCreate(&solver, mat, pc);
  i). Solve the linear equation. pARMS_SolverApply(solver, rhs, sol);
